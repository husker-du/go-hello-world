
---
name: Go CICD

on:
  push:
    branches: [ master ]
    tags: [ "*" ]
  pull_request:
    branches: [ master ]

env:
  ECR_REPOSITORY: go-hello-world
  ECS_TASK_DEFINITION: go-hello-world
  ECS_SERVICE: go-hello-world-service
  ECS_CLUSTER: go-hello-world-cluster-dev
  CONTAINER_NAME: go-hello-world

jobs:
  ci:
    name: Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.13

      - name: Build
        run: go build -v ./...

      - name: "Testing"
        run: |
          echo "Running tests..."

      - name: "Code Analysis"
        run: |
          echo "Analyzing code..."

  cd:
    name: "Deployment"
    runs-on: "ubuntu-latest"
    needs:
      - ci
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${GITHUB_REF#refs/*/}
          echo IMAGE_TAG: $IMAGE_TAG
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${GITHUB_REF#refs/*/}
          echo IMAGE_TAG: $IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Get task definition
        id: get-task
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json
          cat task-definition.json

      - name: Update task definition image
        id: upd-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.push-image.outputs.image }}
          environment-variables: "LOG_LEVEL=debug"

      - name: Deploy task definition in ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.upd-task.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
